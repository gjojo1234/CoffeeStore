import Head from "next/head";

import styles from "@/styles/Home.module.css";
import Banner from "@/components/Banner";
import Card from "@/components/Card";
import { useContext, useEffect } from "react";

import { fetchCoffeeStores } from "../../lib/coffee-stores";
import useTrackLocation from "../../hooks/useTrackLocation";
import { ACTION_TYPES, StoreContext } from "@/store/store-context";

export async function getStaticProps(context) {
  const coffeeStores = await fetchCoffeeStores();
  return {
    props: { coffeeStores: coffeeStores },
  };
}
export default function Home(props) {
  const { handleTrackLocation, locationErrorMsg, isFindingLocation } =
    useTrackLocation();
  const { dispatch, state } = useContext(StoreContext);
  const { coffeeStores, latLong } = state;

  useEffect(() => {
    const setCoffeeStoresByLocation = async () => {
      if (latLong) {
        try {
          const response = await fetch(
            `/api/getCoffeeStoreByLocation?latLong=${latLong}&limit=30`
          );

          const coffeeStores = await response.json();
          dispatch({
            type: ACTION_TYPES.SET_COFFEE_STORES,
            payload: {
              coffeeStores,
            },
          });
        } catch (error) {
          console.error("Error", { error });
        }
      }
    };
    setCoffeeStoresByLocation();
  }, [latLong, dispatch]);
  function btnTextChange() {
    handleTrackLocation();
  }
  return (
    <div className={styles.container}>
      <Head>
        <title>Create Next App</title>
        <meta name="description" content="Generated by create next app" />
        <meta name="viewport" content="width=device-width, initial-scale=1" />
        <link rel="icon" href="/favicon.ico" />
      </Head>
      <Banner
        btnText={isFindingLocation ? "Locating..." : "View stores nearby"}
        btnChangeText={btnTextChange}
      />
      {locationErrorMsg && <p>Something went wrong: {locationErrorMsg}</p>}

      {coffeeStores.length > 0 && (
        <section className={styles.section1}>
          <h2 className={styles.heading2}>Stores near you</h2>
          <div className={styles.cardLayout}>
            {coffeeStores.map((coffeeStore) => {
              return (
                <Card
                  key={coffeeStore.id}
                  imgUrl={
                    coffeeStore.imgUrl || "/static/Coffee_Lover_Isometric.png"
                  }
                  href={`/coffee-store/${coffeeStore.id}`}
                  name={coffeeStore.name}
                />
              );
            })}
          </div>
        </section>
      )}
      {props.coffeeStores.length > 0 && (
        <section className={styles.section2}>
          <h2 className={styles.heading2}>New York stores</h2>
          <div className={styles.cardLayout}>
            {props.coffeeStores.map((coffeeStore) => {
              return (
                <Card
                  key={coffeeStore.id}
                  imgUrl={
                    coffeeStore.imgUrl || "/static/Coffee_Lover_Isometric.png"
                  }
                  href={`/coffee-store/${coffeeStore.id}`}
                  name={coffeeStore.name}
                />
              );
            })}
          </div>
        </section>
      )}
    </div>
  );
}
